# ========================================================================
# PIPELINE DE DESARROLLO AUTOMATIZADO PARA MICROSERVICIOS (OPTIMIZADO)
# ========================================================================

name: Development Pipeline

on:
  push:
    branches:
      - feat/pipeline
  pull_request:
    branches:
      - main
  repository_dispatch:
    types: [infra-completed]
# Variables reutilizables a lo largo del workflow
env:
  ACR_NAME: "msappacrestebangzam.azurecr.io"
  RESOURCE_GROUP: "microservice-app-rg-estebangzam"
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_COLONIA }} # Credenciales de Azure configuradas en GitHub Secrets
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_COLONIA }} # ID de la suscripción de Azure configuradas en GitHub Secrets
  SERVICE_NAME: "frontend"

jobs:
  build_and_deploy:
    name: Build y Deploy
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout con todos los tags
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clona toda la historia de commits
          fetch-tags: true # Descarga todos los tags

      # Paso 2: Autenticación con Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      # Paso 3: Verificar grupo de recursos
      - name: Verificar existencia del grupo de recursos
        run: |
          if ! az group exists --name $RESOURCE_GROUP --subscription $AZURE_SUBSCRIPTION_ID | grep true; then
            echo "::error::El grupo de recursos no existe"
            exit 1
          fi

      # Paso 4: Login al ACR
      - name: Login al Azure Container Registry
        run: az acr login --name ${ACR_NAME%%.*}

      # Paso 5: Obtener último tag de versión
      - name: Obtener última versión del tag
        id: get-tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      # Paso 6: Verificar si la imagen ya existe en el ACR
      - name: Verificar imagen en ACR
        id: check-image
        run: |
          TAGS=$(az acr repository show-tags --name $ACR_NAME --repository $SERVICE_NAME --output tsv)
          if [[ " $TAGS " =~ " ${{ steps.get-tag.outputs.latest_tag }} " ]]; then
            echo "existe=true" >> $GITHUB_OUTPUT
          else
            echo "existe=false" >> $GITHUB_OUTPUT
          fi

      # Paso 7: Construir y subir imagen solo si no existe
      - name: Construir y subir imagen
        if: steps.check-image.outputs.existe == 'false'
        run: |
          docker build -t $ACR_NAME/$SERVICE_NAME:${{ steps.get-tag.outputs.latest_tag }} -t $ACR_NAME/$SERVICE_NAME:latest .
          docker push $ACR_NAME/$SERVICE_NAME:${{ steps.get-tag.outputs.latest_tag }}
          docker push $ACR_NAME/$SERVICE_NAME:latest

      # Paso 8: Desplegar solo si hay nueva imagen
      - name: Desplegar en Azure Container App
        if: steps.check-image.outputs.existe == 'false'
        run: |
          az containerapp update \
            --name $SERVICE_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $ACR_NAME/$SERVICE_NAME:latest \
            --subscription $AZURE_SUBSCRIPTION_ID
